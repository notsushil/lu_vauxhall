import { useState } from "react";

export default function LevelUpReportForm() {
  const [formData, setFormData] = useState({
    date: new Date().toLocaleDateString('en-AU', { 
      weekday: 'long', 
      day: 'numeric', 
      month: 'long', 
      year: 'numeric' 
    }),
    weather: '',
    managers: { open: '', mid: '', close: '' },
    staffs: { open: '', mid: '', close: '' },
    security: { name1: '', name2: '', name3: '' },
    hourlyData: {
      '10am': { turnover: '', increments: '', egm: '', vip: '' },
      '11am': { turnover: '', increments: '', egm: '', vip: '' },
      '12pm': { turnover: '', increments: '', egm: '', vip: '' },
      '1pm': { turnover: '', increments: '', egm: '', vip: '' },
      '2pm': { turnover: '', increments: '', egm: '', vip: '' },
      '3pm': { turnover: '', increments: '', egm: '', vip: '' },
      '4pm': { turnover: '', increments: '', egm: '', vip: '' },
      '5pm': { turnover: '', increments: '', egm: '', vip: '' },
      '6pm': { turnover: '', increments: '', egm: '', vip: '' },
      '7pm': { turnover: '', increments: '', egm: '', vip: '' },
      '8pm': { turnover: '', increments: '', egm: '', vip: '' },
      '9pm': { turnover: '', increments: '', egm: '', vip: '' },
      '10pm': { turnover: '', increments: '', egm: '', vip: '' },
      '11pm': { turnover: '', increments: '', egm: '', vip: '' },
      '12am': { turnover: '', increments: '', egm: '', vip: '' },
      '1am': { turnover: '', increments: '', egm: '', vip: '' },
      '2am': { turnover: '', increments: '', egm: '', vip: '' },
      '3am': { turnover: '', increments: '', egm: '', vip: '' },
      '4am': { turnover: '', increments: '', egm: '', vip: '' },
      '5am': { turnover: '', increments: '', egm: '', vip: '' },
      '6am': { turnover: '', increments: '', egm: '', vip: '' },
      '7am': { turnover: '', increments: '', egm: '', vip: '' },
      '8am': { turnover: '', increments: '', egm: '', vip: '' },
      '9am': { turnover: '', increments: '', egm: '', vip: '' }
    }
  });

  const [status, setStatus] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);

  const handleInputChange = (section, field, value) => {
    setFormData(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value
      }
    }));
  };

  const handleHourlyChange = (time, field, value) => {
    setFormData(prev => ({
      ...prev,
      hourlyData: {
        ...prev.hourlyData,
        [time]: {
          ...prev.hourlyData[time],
          [field]: value
        }
      }
    }));
  };

  const generatePDF = async () => {
    setIsGenerating(true);
    setStatus("Generating PDF...");

    try {
      const res = await fetch("/api/generate-pdf", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          formData,
          filename: `LevelUP-Shift-Report-${new Date().toISOString().split('T')[0]}.pdf`
        }),
      });

      const json = await res.json();

      if (!res.ok) {
        throw new Error(json.error || "Failed to generate PDF");
      }

      setStatus("✅ PDF generated and sent successfully!");
    } catch (err) {
      setStatus(`❌ Error: ${err.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div style={{ 
      maxWidth: '1200px', 
      margin: '0 auto', 
      padding: '20px',
      fontFamily: 'Arial, sans-serif',
      backgroundColor: '#f5f5f5',
      minHeight: '100vh'
    }}>
      {/* Header */}
      <div style={{
        backgroundColor: '#8B5CF6',
        color: 'white',
        padding: '20px',
        borderRadius: '12px',
        marginBottom: '20px',
        textAlign: 'center'
      }}>
        <h1 style={{ margin: '0 0 20px 0', fontSize: '28px', fontWeight: 'bold' }}>
          LevelUP Shift Report
        </h1>
        <div style={{ display: 'flex', justifyContent: 'center', gap: '20px', flexWrap: 'wrap' }}>
          <div style={{
            backgroundColor: '#A78BFA',
            padding: '10px 20px',
            borderRadius: '8px',
            fontSize: '16px'
          }}>
            {formData.date}
          </div>
          <div style={{
            backgroundColor: '#A78BFA',
            padding: '10px 20px',
            borderRadius: '8px',
            fontSize: '16px'
          }}>
            Weather in Granville: {formData.weather || '—'}
          </div>
        </div>
      </div>

      {/* Staffing Section */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
        gap: '20px',
        marginBottom: '30px'
      }}>
        {/* Managers */}
        <div style={{
          backgroundColor: 'white',
          padding: '20px',
          borderRadius: '12px',
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
        }}>
          <h3 style={{ margin: '0 0 15px 0', color: '#8B5CF6' }}>Managers</h3>
          <div style={{ display: 'grid', gap: '10px' }}>
            {['open', 'mid', 'close'].map(shift => (
              <div key={shift} style={{ textTransform: 'capitalize' }}>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
                  {shift}:
                </label>
                <input
                  type="text"
                  placeholder="Name"
                  value={formData.managers[shift]}
                  onChange={(e) => handleInputChange('managers', shift, e.target.value)}
                  style={{
                    width: '100%',
                    padding: '8px',
                    border: '1px solid #ddd',
                    borderRadius: '6px',
                    fontSize: '14px'
                  }}
                />
              </div>
            ))}
          </div>
        </div>

        {/* Staffs */}
        <div style={{
          backgroundColor: 'white',
          padding: '20px',
          borderRadius: '12px',
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
        }}>
          <h3 style={{ margin: '0 0 15px 0', color: '#8B5CF6' }}>Staffs</h3>
          <div style={{ display: 'grid', gap: '10px' }}>
            {['open', 'mid', 'close'].map(shift => (
              <div key={shift} style={{ textTransform: 'capitalize' }}>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
                  {shift}:
                </label>
                <input
                  type="text"
                  placeholder="Name"
                  value={formData.staffs[shift]}
                  onChange={(e) => handleInputChange('staffs', shift, e.target.value)}
                  style={{
                    width: '100%',
                    padding: '8px',
                    border: '1px solid #ddd',
                    borderRadius: '6px',
                    fontSize: '14px'
                  }}
                />
              </div>
            ))}
          </div>
        </div>

        {/* Security on Duty */}
        <div style={{
          backgroundColor: 'white',
          padding: '20px',
          borderRadius: '12px',
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
        }}>
          <h3 style={{ margin: '0 0 15px 0', color: '#8B5CF6' }}>Security on Duty</h3>
          <div style={{ marginBottom: '10px' }}>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
              Shift:
            </label>
          </div>
          <div style={{ display: 'grid', gap: '10px' }}>
            {['name1', 'name2', 'name3'].map((name, index) => (
              <input
                key={name}
                type="text"
                placeholder={index === 0 ? 'Name' : index === 1 ? 'Names' : 'Name'}
                value={formData.security[name]}
                onChange={(e) => handleInputChange('security', name, e.target.value)}
                style={{
                  width: '100%',
                  padding: '8px',
                  border: '1px solid #ddd',
                  borderRadius: '6px',
                  fontSize: '14px'
                }}
              />
            ))}
          </div>
        </div>
      </div>

      {/* Hourly Data Table */}
      <div style={{
        backgroundColor: 'white',
        padding: '20px',
        borderRadius: '12px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
        marginBottom: '30px'
      }}>
        <h3 style={{ margin: '0 0 20px 0', color: '#8B5CF6' }}>Hourly Operational Data</h3>
        <div style={{ overflowX: 'auto' }}>
          <table style={{ width: '100%', borderCollapse: 'collapse' }}>
            <thead>
              <tr style={{ backgroundColor: '#f8f9fa' }}>
                <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #ddd' }}>Time</th>
                <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #ddd' }}>Turnover</th>
                <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #ddd' }}>Increments ('000s)</th>
                <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #ddd' }}>EGM in play</th>
                <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #ddd' }}>VIP Mix</th>
                <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #ddd' }}>Action</th>
              </tr>
            </thead>
            <tbody>
              {Object.entries(formData.hourlyData).map(([time, data]) => (
                <tr key={time}>
                  <td style={{ padding: '12px', border: '1px solid #ddd', fontWeight: 'bold' }}>
                    {time}
                  </td>
                  <td style={{ padding: '8px', border: '1px solid #ddd' }}>
                    <div style={{ display: 'flex', alignItems: 'center' }}>
                      <span style={{ marginRight: '5px' }}>$</span>
                      <input
                        type="text"
                        placeholder="0"
                        value={data.turnover}
                        onChange={(e) => handleHourlyChange(time, 'turnover', e.target.value)}
                        style={{
                          border: 'none',
                          outline: 'none',
                          width: '80px',
                          fontSize: '14px'
                        }}
                      />
                    </div>
                  </td>
                  <td style={{ padding: '8px', border: '1px solid #ddd' }}>
                    <div style={{ display: 'flex', alignItems: 'center' }}>
                      <input
                        type="text"
                        placeholder="0"
                        value={data.increments}
                        onChange={(e) => handleHourlyChange(time, 'increments', e.target.value)}
                        style={{
                          border: 'none',
                          outline: 'none',
                          width: '80px',
                          fontSize: '14px'
                        }}
                      />
                      <span style={{ marginLeft: '5px' }}>000s</span>
                    </div>
                  </td>
                  <td style={{ padding: '8px', border: '1px solid #ddd' }}>
                    <div style={{ display: 'flex', alignItems: 'center' }}>
                      <span style={{ marginRight: '5px' }}>#</span>
                      <input
                        type="text"
                        placeholder="0"
                        value={data.egm}
                        onChange={(e) => handleHourlyChange(time, 'egm', e.target.value)}
                        style={{
                          border: 'none',
                          outline: 'none',
                          width: '80px',
                          fontSize: '14px'
                        }}
                      />
                    </div>
                  </td>
                  <td style={{ padding: '8px', border: '1px solid #ddd' }}>
                    <input
                      type="text"
                      placeholder="—"
                      value={data.vip}
                      onChange={(e) => handleHourlyChange(time, 'vip', e.target.value)}
                      style={{
                        border: 'none',
                        outline: 'none',
                        width: '100px',
                        fontSize: '14px'
                      }}
                    />
                  </td>
                  <td style={{ padding: '8px', border: '1px solid #ddd' }}>
                    <button
                      type="button"
                      style={{
                        backgroundColor: '#8B5CF6',
                        color: 'white',
                        border: 'none',
                        padding: '6px 12px',
                        borderRadius: '6px',
                        fontSize: '12px',
                        cursor: 'pointer'
                      }}
                    >
                      Edit
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Generate Report Button */}
      <div style={{ textAlign: 'center' }}>
        <button
          onClick={generatePDF}
          disabled={isGenerating}
          style={{
            backgroundColor: '#8B5CF6',
            color: 'white',
            border: 'none',
            padding: '15px 30px',
            borderRadius: '8px',
            fontSize: '16px',
            fontWeight: 'bold',
            cursor: isGenerating ? 'not-allowed' : 'pointer',
            opacity: isGenerating ? 0.7 : 1
          }}
        >
          {isGenerating ? 'Generating Report...' : 'Generate & Send Report'}
        </button>
        {status && (
          <div style={{
            marginTop: '15px',
            padding: '10px',
            backgroundColor: status.includes('✅') ? '#d4edda' : '#f8d7da',
            color: status.includes('✅') ? '#155724' : '#721c24',
            borderRadius: '6px',
            fontSize: '14px'
          }}>
            {status}
          </div>
        )}
      </div>
    </div>
  );
}